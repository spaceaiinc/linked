--
-- PostgreSQL database dump
--

-- Dumped from database version 15.1 (Ubuntu 15.1-1.pgdg20.04+1)
-- Dumped by pg_dump version 15.6 (Homebrew)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: public; Type: SCHEMA; Schema: -; Owner: -
--

CREATE SCHEMA IF NOT EXISTS public;

ALTER SCHEMA public OWNER TO pg_database_owner;

-- Set the search_path to public
SET search_path TO public;

-- Enable the vector extension
CREATE EXTENSION IF NOT EXISTS vector;

--
-- Name: handle_new_user(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.handle_new_user() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
begin
  insert into public.profiles (id, full_name, avatar_url, email)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url', new.email);
  return new;
end;
$$;

-- Create a trigger for handling new user signups
CREATE OR REPLACE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();

--
-- Name: match_documents(public.vector, integer, jsonb); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.match_documents(query_embedding public.vector, match_count integer DEFAULT NULL::integer, filter jsonb DEFAULT '{}'::jsonb) RETURNS TABLE(id uuid, content text, metadata jsonb, embedding jsonb, similarity double precision)
    LANGUAGE plpgsql
    AS $$
#variable_conflict use_column
begin
  return query
  select
    embeddings.id,
    embeddings.content,
    embeddings.metadata,
    (embeddings.embedding::text)::jsonb as embedding,
    1 - (embeddings.embedding <=> query_embedding) as similarity
  from embeddings
  where embeddings.metadata @> filter
  order by embeddings.embedding <=> query_embedding
  limit match_count;
end;
$$;


SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: conversations; Type: TABLE; Schema: public; Owner: -
--


CREATE TABLE public.conversations (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    user_id uuid,
    model_used text NOT NULL,
    conversation jsonb DEFAULT '[]'::jsonb,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    title text,
    type text
);


--
-- Name: documents; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.documents (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    file_url text,
    file_name text,
    user_id uuid,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    size numeric,
    conversation_id uuid
);

ALTER TABLE ONLY public.documents FORCE ROW LEVEL SECURITY;


--
-- Name: embeddings; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.embeddings (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    document_id uuid,
    content text,
    embedding public.vector,
    metadata jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);

ALTER TABLE ONLY public.embeddings FORCE ROW LEVEL SECURITY;


--
-- Name: generations; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.generations (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    email text,
    input_data jsonb,
    output_data jsonb,
    model text,
    type text
);


--
-- Name: newsletter; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.newsletter (
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    email text NOT NULL
);


--
-- Name: profiles; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.profiles (
    id uuid NOT NULL,
    updated_at timestamp with time zone,
    username text,
    full_name text,
    avatar_url text,
    email text,
    purchase text,
    credits smallint DEFAULT '20'::smallint,
    CONSTRAINT username_length CHECK ((char_length(username) >= 3))
);


--
-- Name: purchases; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.purchases (
    id bigint NOT NULL,
    user_email text,
    type text,
    created_at timestamp with time zone DEFAULT now(),
    purchase_id text,
    payload jsonb,
    github_username text
);


--
-- Name: purchases_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

ALTER TABLE public.purchases ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.purchases_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: recordings; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.recordings (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id uuid,
    file_url text NOT NULL,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    title text
);

ALTER TABLE ONLY public.recordings FORCE ROW LEVEL SECURITY;


--
-- Name: summaries; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.summaries (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    recording_id uuid,
    summary text NOT NULL,
    action_items text,
    model text NOT NULL,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    title text
);

ALTER TABLE ONLY public.summaries FORCE ROW LEVEL SECURITY;


--
-- Name: transcripts; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.transcripts (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    recording_id uuid,
    transcript text NOT NULL,
    model text NOT NULL,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    chunks jsonb
);

ALTER TABLE ONLY public.transcripts FORCE ROW LEVEL SECURITY;


--
-- Name: conversations conversations_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.conversations
    ADD CONSTRAINT conversations_pkey PRIMARY KEY (id);


--
-- Name: documents documents_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.documents
    ADD CONSTRAINT documents_pkey PRIMARY KEY (id);


--
-- Name: embeddings embeddings_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.embeddings
    ADD CONSTRAINT embeddings_pkey PRIMARY KEY (id);


--
-- Name: generations marketing_growth_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.generations
    ADD CONSTRAINT marketing_growth_pkey PRIMARY KEY (id);


--
-- Name: newsletter newsletter_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.newsletter
    ADD CONSTRAINT newsletter_pkey PRIMARY KEY (email);


--
-- Name: profiles profiles_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.profiles
    ADD CONSTRAINT profiles_pkey PRIMARY KEY (id);


--
-- Name: profiles profiles_username_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.profiles
    ADD CONSTRAINT profiles_username_key UNIQUE (username);


--
-- Name: purchases purchases_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.purchases
    ADD CONSTRAINT purchases_pkey PRIMARY KEY (id);


--
-- Name: recordings recordings_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.recordings
    ADD CONSTRAINT recordings_pkey PRIMARY KEY (id);


--
-- Name: summaries summaries_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.summaries
    ADD CONSTRAINT summaries_pkey PRIMARY KEY (id);


--
-- Name: transcripts transcripts_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.transcripts
    ADD CONSTRAINT transcripts_pkey PRIMARY KEY (id);


--
-- Name: conversations conversations_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.conversations
    ADD CONSTRAINT conversations_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: documents documents_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.documents
    ADD CONSTRAINT documents_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: embeddings embeddings_document_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.embeddings
    ADD CONSTRAINT embeddings_document_id_fkey FOREIGN KEY (document_id) REFERENCES public.documents(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: documents fk_conversation; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.documents
    ADD CONSTRAINT fk_conversation FOREIGN KEY (conversation_id) REFERENCES public.conversations(id);


--
-- Name: profiles profiles_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.profiles
    ADD CONSTRAINT profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: recordings recordings_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.recordings
    ADD CONSTRAINT recordings_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: summaries summaries_recording_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.summaries
    ADD CONSTRAINT summaries_recording_id_fkey FOREIGN KEY (recording_id) REFERENCES public.recordings(id) ON DELETE CASCADE;


--
-- Name: transcripts transcripts_recording_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.transcripts
    ADD CONSTRAINT transcripts_recording_id_fkey FOREIGN KEY (recording_id) REFERENCES public.recordings(id) ON DELETE CASCADE;


--
-- Name: generations AI responses are public and readable by anyone.; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "AI responses are public and readable by anyone." ON public.generations FOR SELECT USING (true);


--
-- Name: generations Allow insert into generations; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Allow insert into generations" ON public.generations FOR INSERT WITH CHECK (true);


--
-- Name: profiles Public profiles are viewable by everyone.; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Public profiles are viewable by everyone." ON public.profiles FOR SELECT USING (true);


--
-- Name: conversations Users can delete their own conversations; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Users can delete their own conversations" ON public.conversations FOR DELETE USING ((auth.uid() = user_id));


--
-- Name: documents Users can delete their own documents; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Users can delete their own documents" ON public.documents FOR DELETE USING ((auth.uid() = user_id));


--
-- Name: embeddings Users can delete their own embeddings; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Users can delete their own embeddings" ON public.embeddings FOR DELETE USING ((auth.uid() IN ( SELECT documents.user_id
   FROM public.documents
  WHERE (documents.id = embeddings.document_id))));


--
-- Name: recordings Users can delete their own recordings; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Users can delete their own recordings" ON public.recordings FOR DELETE USING ((auth.uid() = user_id));


--
-- Name: summaries Users can delete their own summaries; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Users can delete their own summaries" ON public.summaries FOR DELETE USING ((auth.uid() = ( SELECT recordings.user_id
   FROM public.recordings
  WHERE (recordings.id = summaries.recording_id))));


--
-- Name: transcripts Users can delete their own transcripts; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Users can delete their own transcripts" ON public.transcripts FOR DELETE USING ((auth.uid() = ( SELECT recordings.user_id
   FROM public.recordings
  WHERE (recordings.id = transcripts.recording_id))));


--
-- Name: conversations Users can insert their own conversations; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Users can insert their own conversations" ON public.conversations FOR INSERT WITH CHECK ((auth.uid() = user_id));


--
-- Name: documents Users can insert their own documents; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Users can insert their own documents" ON public.documents FOR INSERT WITH CHECK ((auth.uid() = user_id));


--
-- Name: embeddings Users can insert their own embeddings; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Users can insert their own embeddings" ON public.embeddings FOR INSERT WITH CHECK ((auth.uid() IN ( SELECT documents.user_id
   FROM public.documents
  WHERE (documents.id = embeddings.document_id))));


--
-- Name: profiles Users can insert their own profile.; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Users can insert their own profile." ON public.profiles FOR INSERT WITH CHECK ((auth.uid() = id));


--
-- Name: recordings Users can insert their own recordings; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Users can insert their own recordings" ON public.recordings FOR INSERT WITH CHECK ((auth.uid() = user_id));


--
-- Name: summaries Users can insert their own summaries; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Users can insert their own summaries" ON public.summaries FOR INSERT WITH CHECK ((auth.uid() = ( SELECT recordings.user_id
   FROM public.recordings
  WHERE (recordings.id = summaries.recording_id))));


--
-- Name: transcripts Users can insert their own transcripts; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Users can insert their own transcripts" ON public.transcripts FOR INSERT WITH CHECK ((auth.uid() = ( SELECT recordings.user_id
   FROM public.recordings
  WHERE (recordings.id = transcripts.recording_id))));


--
-- Name: conversations Users can select their own conversations; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Users can select their own conversations" ON public.conversations FOR SELECT USING ((auth.uid() = user_id));


--
-- Name: documents Users can select their own documents; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Users can select their own documents" ON public.documents FOR SELECT USING ((auth.uid() = user_id));


--
-- Name: embeddings Users can select their own embeddings; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Users can select their own embeddings" ON public.embeddings FOR SELECT USING ((auth.uid() IN ( SELECT documents.user_id
   FROM public.documents
  WHERE (documents.id = embeddings.document_id))));


--
-- Name: recordings Users can select their own recordings; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Users can select their own recordings" ON public.recordings FOR SELECT USING ((auth.uid() = user_id));


--
-- Name: summaries Users can select their own summaries; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Users can select their own summaries" ON public.summaries FOR SELECT USING ((auth.uid() = ( SELECT recordings.user_id
   FROM public.recordings
  WHERE (recordings.id = summaries.recording_id))));


--
-- Name: transcripts Users can select their own transcripts; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Users can select their own transcripts" ON public.transcripts FOR SELECT USING ((auth.uid() = ( SELECT recordings.user_id
   FROM public.recordings
  WHERE (recordings.id = transcripts.recording_id))));


--
-- Name: profiles Users can update own profile.; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Users can update own profile." ON public.profiles FOR UPDATE USING ((auth.uid() = id));


--
-- Name: conversations Users can update their own conversations; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Users can update their own conversations" ON public.conversations FOR UPDATE USING ((auth.uid() = user_id));


--
-- Name: documents Users can update their own documents; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Users can update their own documents" ON public.documents FOR UPDATE USING ((auth.uid() = user_id));


--
-- Name: embeddings Users can update their own embeddings; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Users can update their own embeddings" ON public.embeddings FOR UPDATE USING ((auth.uid() IN ( SELECT documents.user_id
   FROM public.documents
  WHERE (documents.id = embeddings.document_id))));


--
-- Name: recordings Users can update their own recordings; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Users can update their own recordings" ON public.recordings FOR UPDATE USING ((auth.uid() = user_id));


--
-- Name: conversations; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public.conversations ENABLE ROW LEVEL SECURITY;

--
-- Name: documents; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public.documents ENABLE ROW LEVEL SECURITY;

--
-- Name: embeddings; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public.embeddings ENABLE ROW LEVEL SECURITY;

--
-- Name: generations; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public.generations ENABLE ROW LEVEL SECURITY;

--
-- Name: newsletter; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public.newsletter ENABLE ROW LEVEL SECURITY;

--
-- Name: profiles; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;

--
-- Name: purchases; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public.purchases ENABLE ROW LEVEL SECURITY;

--
-- Name: recordings; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public.recordings ENABLE ROW LEVEL SECURITY;

--
-- Name: summaries; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public.summaries ENABLE ROW LEVEL SECURITY;

--
-- Name: transcripts; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public.transcripts ENABLE ROW LEVEL SECURITY;

--
-- PostgreSQL database dump complete
--

